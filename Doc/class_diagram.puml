@startuml Ant

class Config {
    - {static} Config *instance

    - ...

    + {static} Config get()
}

abstract class Ant {
    - BoardCell *currentCell
    - AntType antType
    - int hoursBeforeDeath
    - int alive = true
    - int maxHoursWithoutFeeding
    # {static} float colonyFood
    # int hoursSinceLastFeeding
    # bool haveArrivedToColony
    # BoardCell *lastCell
    # list<BoardCell *> *cellTraveledSinceStart
    # float foodConsumedEachDay


    - void tickMove(Board *board)
    - void tickFood(Board *board)
    # bool eatFood(float amountToEat)
    # int numberOfTimeOnCell(BoardCell *cell)
    + void tick(Board *board)
    + void kill()
    + BoardCell *getCurrentCell()
    + int getAntTileNumber()
    + list<BoardCell *> getAvailableCellToMove(Board *board)
    + list<BoardCell *> getAvailableVisitedCellToMove(Board *board)
    + void goToCell(BoardCell *newCell)
    + bool goBackToLastCell()
}

class Queen {
    - int nbChild = 0
    - bool assaulted = false

    - {static} Ant *createRandomAnt(BoardCell *spawnCell)
    - void tickChild(Board *board)
    - void generateAnt(Board *board)
    + void createChildAndExpand(Board *board, int antToCreate)
}

abstract class AgeAdult {
    + AgeAdult(int hoursBeforeAdult)

    - int hoursBeforeAdult

    + boolean isAdult()
    + void incrementAge() 
}

class Worker {
    - bool goingHome
    - float pheromoneAmount
    - float foodCarriedAmount
    - Vector2i direction

    - void dropFood()
    - void pickFood()
    - void visitColony()
    - void putPheromones()
    - void goCollectFood(Board *board)
    - BoardCell *getNextCellToFood(Board *board, const list<BoardCell *> &availableCells)
    - list<BoardCell *> getDirectionalCells(Board *board)
}

class Scout {
    
}

class Soldier {
    - int tickSinceColonyVisited

    + void moveSoldier(Board *board)
    + {static} void attackOneSlaveOwnerNearCell(Board *board, BoardCell *cell)
}

class SlaveOwner {
    - int larvaCarried

    - void goToCenter(Board *board)
    + void attackQueen(Board *board)
}

abstract class BoardCell {
    - int randomCellDecoration
    - int posLength
    - int posHeight
    - BoardCellType boardCellType
    - float pheromoneAmount
    - int maxAntOnCell
    - Board *board
    - list<BoardCell *> *neighborCells

    # list<Ant *> *antOnCell
    # bool visited

    + bool haveSpace()
    + list<int> getLayersTileNumbers()
    + float addPheromone(float amount)
    + void removePheromone(float amount)
    + bool haveMinPheromone(float amount)
    + void addAntOnCell(Ant *antToAdd)
    + void removeAntOnCell(Ant *antToRemove)
    + void onNearCellVisited()
    + int cellsDistance(BoardCell *cell2)
}

class RockCell {
    
}

class BasicCell {
    - float foodAmount = 0
}

class ColonyCell {
    
}

class Board {
    - sf::Mutex *mutex
    - BoardCell ***cells
    - list<ColonyCell *> *coloniesCells
    - int currentTick
    - int remainingTickBeforeSlaveOwnerSpawn
    - list<Ant *> *antList
    - Queen *antQueen
    - sf::VertexArray floor_vertex
    - sf::VertexArray layer_vertex
    - sf::Texture m_tileSet
    - bool windowClosed = false

    - BasicCell *findExpandableBasicCell()
    - void createSlaveOwner()
    - void tickPheromone()
    + void tick()
    + bool isQueenAlive()
    + bool calcLayer()
    + bool calcFloor()
    + int catchLarva(int nbToCatch)
    + BoardCell *getCenterCell()
    + void expandColonies()
}

class BoardGenerator {
    - Board *board

    - {static} BoardGenerator *createBoard(Mutex *mutex)
    - void generateSmallFoodUnit()
    - void generateBigFoodUnit()
    - void generateBigFoodUnitCross(int heightCenter, int searchPosLength)
    - BasicCell *findCellNearCoordinateWithCrossCellFree(int height, int length)
    - bool isBasicCellsCrossEmpty(int centerHeight, int centerLength)
    - bool isValidBigFoodUnitCell(int height, int length)
    - void generateRock()
    - void generateBasicCell()
    - void generateColony()
    - void removeRockNearColony(int centerHeight, int centerLength)
    - bool hasRockNeighbor(int height, int length)
    - bool hasFoodNeighbor(int height, int length)
    - list<BoardCell *> getNearbyCells(int height, int length)

    + {static} Board *generateBoard(Mutex *mutex)
    + {static} bool isValidCell(int height, int length)
}

class Main {
}

class GUIMain {
    - Board *board
    - Game *game
    - SimulationStats *stats
    - bool waitReleaseGameKey

    - sf::RenderWindow *window
    - sf::View simView
    - sf::View statView

    - sf::Vector2f oldPos
    - bool moving
    - float zoom
    - float currentZoom

    - void runUI(sf::Mutex *mutex)
    - void smoothOnKeyPressed()
    - void onClosed()
    - void onMouseButtonPressed(sf::Event event)
    - void onMouseButtonReleased(sf::Event event)
    - void onMouseMoved(sf::Event event)
    - void onMouseWheelScrolled(sf::Event event)
    - void onResized(sf::Event event)
    - void center()
    - void preventOutOfBorder(sf::Vector2f deltaPos)
    - void letterBoxView(float windowWidth, float windowHeight)
    - {static} sf::Vector2f getMapSize()
}


class Game {
    - bool pause = false
    - Board *board
    - SimulationStats *stats
    - string gnuPlotFile = "gnuplot.txt"
    - string bufferGNUPlot

    - void tickAnts()
    - void tickQueen()

    + void tickGame()
    + void saveCurrentTick()
    + void logGNUPlot()
    + bool isPause() const
    + void setPause(bool pause)
}


class SimulationStats {
    - bool showStats
    - int currentTPS
    - int wantedTPS
    - float foodAmount
    - bool isGameEnded
    - string endMessage
    - int workerAmount
    - int soldierAmount
    - int scoutAmount
    - int slaveOwnerAmount
    - sf::Texture tileSet
    - sf::Font font
}

class InfoDisplay {
    - sf::VertexArray *icon
    - sf::Font font
    - sf::Vector2f viewScale
    - string text
}

class TpsDisplay {
    - sf::Font font
    - sf::Vector2f viewScale
    - int currentTps
    - int wantedTps
 
    - sf::Color getTpsColor()
}

enum TileEnum {
    BASIC_FLOOR = 0,
    ROCK_FLOOR = 5,
    COLONY_FLOOR = 9,
    FOOD_LAYER = 10,
    BIG_FOOD_LAYER = 11,
    CLOUD_LAYER = 14,
    QUEEN = 24,
    WORKER_ANT = 15,
    SOLDIER_ANT = 25,
    SCOOT_ANT = 35,
    SLAVEOWNER_ANT = 45,
    FIRST_PHEROMONE_LEVEL = 55
}


RockCell --|> BoardCell
BasicCell --|> BoardCell
ColonyCell --|> BoardCell

Board --|> Drawable
SimulationStats --|> Drawable
TpsDisplay --|> Drawable
InfoDisplay --|> Drawable

InfoDisplay -- SimulationStats
TpsDisplay -- SimulationStats

Main -- SimulationStats
Main -- Game
Main -- Board
GUIMain -- Main
Board -- BoardGenerator
Board o-- BoardCell
Board -- TileEnum

BoardCell *--> Ant

Worker --|> AgeAdult
Scout --|> AgeAdult

Worker --|> Ant
Scout --|> Ant
Soldier --|> Ant
SlaveOwner --|> Ant
Queen --|> Ant

@enduml
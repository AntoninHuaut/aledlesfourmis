@startuml Ant

class Config {
    - {static} Config *instance

    - int tileSize
    - float marginOutOfBorder
    - int fpsMax

    - int height
    - int length

    - float rockPercent
    - float foodPercent
    - int smallFoodUnitValue
    - int bigFoodUnitValue

    - int rockMaxAntOnCell
    - int basicCellMaxAntOnCell
    - int colonyMaxAntOnCell

    - float defaultFoodConsumingTick
    - float queenFoodConsumingTick

    - int queenHoursBeforeDeath
    - int defaultHoursBeforeDeath

    - int scootHoursBeforeAdult
    - int workerHoursBeforeAdult

    - int newAntEveryDay
    - int workerMaxFoodAmountCanCarried
    - int soldierHoursBeforeVisitColony
    - int slaveOwnerHoursBeforeHunger

    + {static} Config get()
}

abstract class Ant {
    - {static} int colonyFood = 0
    
    - BoardCell currentCell
    - int hoursBeforeDeath
    - int foodConsumedEachDay
    - int hoursSinceLastFeeding = 0
    - List<BoardCell> cellTraveledSinceColony
    
    + Ant(int hoursBeforeDeath, int foodConsumedEachDay)

    + void tick()
    + boolean attackAnt(Ant target)

    - void eatFood()
    - void putPheromones()
    - void kill()
}

class Queen {
    - int nbChild = 0
    - boolean wasAssaulted = false
}

abstract class AntAge {
    + AntAge(int hoursBeforeAdult)

    - int hoursBeforeAdult

    + boolean isAdult()
}

class Worker {
    - double pheromoneAmount = 500
    - double foodCarriedAmount = 0

    - void dropFood()
    - void visitColony()
}

class Scout {
    
}

class Soldier {
    - int hoursSinceColonyVisited = 0
}

class SlaveOwner {
    - int larvaCarried = 0
}

abstract class BoardCell {
    - int posLength
    - int posHeight
    - double pheromoneAmount = 0
    - boolean visited = false
    - int maxAntOnCell = 0
    - List<Ant> antOnCell   

    + BoardCell(int x, int y, int maxAntOnCell)
    + void tick()
    + boolean haveSpace()
    - void pheromoneSpreading()
}

class RockCell {
    
}

class BasicCell {
    - double foodAmount = 0

    + void takeFood(Ant ant)
}

class ColonyCell {
    
}

class Board {
    - BoardCell[][] cells
    - List<ColonyCell> coloniesCells

    + Board(List<BoardCell> cells, List<ColonyCell> coloniesCells)
    
    + List<BoardCell> getNearbyCells(BoardCell cell)
}

class BoardGenerator {
    - BoardCell[][] cells
    - List<ColonyCell> coloniesCell

    + {static} Board generateBoard()

    - void generateRock()
    - void generateClassicFood()
    - void generateBigFood()
    - void generateColony()
}

class Simulation {
    + void runGame()
}

RockCell --|> BoardCell
BasicCell --|> BoardCell
ColonyCell --|> BoardCell

Simulation -- Board
Board -- BoardGenerator
Board o-- BoardCell

BoardCell *--> Ant

Worker --|> AntAge
Scout --|> AntAge

Worker --|> Ant
Scout --|> Ant
Soldier --|> Ant
SlaveOwner --|> Ant
Queen --|> Ant

@enduml
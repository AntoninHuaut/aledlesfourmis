@startuml Ant

class Config {
    - {static} Config *instance

    - ...

    + {static} Config get()
}

abstract class Ant {
    - {static} int colonyFood = 0
    
    - BoardCell currentCell
    - int hoursBeforeDeath
    - int foodConsumedEachDay
    - int hoursSinceLastFeeding = 0
    - List<BoardCell> cellTraveledSinceColony
    
    + Ant(int hoursBeforeDeath, int foodConsumedEachDay)

    + void tick()
    + boolean attackAnt(Ant target)

    - void eatFood()
    - void putPheromones()
    - void kill()
}

class Queen {
    - int nbChild = 0
    - boolean wasAssaulted = false
}

abstract class AgeAdult {
    + AgeAdult(int hoursBeforeAdult)

    - int hoursBeforeAdult

    + boolean isAdult()
}

class Worker {
    - double pheromoneAmount = 500
    - double foodCarriedAmount = 0

    - void dropFood()
    - void visitColony()
}

class Scout {
    
}

class Soldier {
    - int hoursSinceColonyVisited = 0
}

class SlaveOwner {
    - int larvaCarried = 0
}

abstract class BoardCell {
    - int posLength
    - int posHeight
    - double pheromoneAmount = 0
    - boolean visited = false
    - int maxAntOnCell = 0
    - List<Ant> antOnCell   

    + BoardCell(int x, int y, int maxAntOnCell)
    + void tick()
    + boolean haveSpace()
    - void pheromoneSpreading()
}

class RockCell {
    
}

class BasicCell {
    - double foodAmount = 0

    + void takeFood(Ant ant)
}

class ColonyCell {
    
}

class Board {
    - BoardCell[][] cells
    - List<ColonyCell> coloniesCells

    + Board(List<BoardCell> cells, List<ColonyCell> coloniesCells)
    
    + List<BoardCell> getNearbyCells(BoardCell cell)
}

class BoardGenerator {
    - BoardCell[][] cells
    - List<ColonyCell> coloniesCell

    + {static} Board generateBoard()

    - void generateRock()
    - void generateClassicFood()
    - void generateBigFood()
    - void generateColony()
}

class Simulation {
    + void runGame()
}

class GUIMain {
    - Board *board;
    - Game *game;
    - SimulationStats *stats;
    - bool waitReleaseGameKey;

    - sf::RenderWindow *window;
    - sf::View simView;
    - sf::View statView;

    - sf::Vector2f oldPos;
    - bool moving;
    - float zoom;
    - float currentZoom;

    - void runUI(sf::Mutex *mutex);
    - void smoothOnKeyPressed();
    - void onClosed();
    - void onMouseButtonPressed(sf::Event event);
    - void onMouseButtonReleased(sf::Event event);
    - void onMouseMoved(sf::Event event);
    - void onMouseWheelScrolled(sf::Event event);
    - void onResized(sf::Event event);
    - void center();
    - void preventOutOfBorder(sf::Vector2f deltaPos);
    - void letterBoxView(float windowWidth, float windowHeight);
    - static sf::Vector2f getMapSize();
}


class Game {
    - bool pause = false;
    - Board *board;
    - SimulationStats *stats;
    - string gnuPlotFile = "gnuplot.txt";
    - string bufferGNUPlot;

    - void tickAnts();
    - void tickQueen();

    + void tickGame();
    + void saveCurrentTick();
    + void logGNUPlot();
    + bool isPause() const;
    + void setPause(bool pause);
}

class SimulationStats {
    - int currentTPS;
    - int wantedTPS;
    - float foodAmount;
    - bool isGameEnded;
    - string endMessage;
    - int workerAmount;
    - int soldierAmount;
    - int scoutAmount;
    - int slaveOwnerAmount;
    - sf::Texture tileSet;
    - sf::Font font;

    - void draw(sf::RenderTarget &target, sf::RenderStates states) const override;
}

enum TileEnum {
    BASIC_FLOOR = 0,
    ROCK_FLOOR = 5,
    COLONY_FLOOR = 9,
    FOOD_LAYER = 10,
    BIG_FOOD_LAYER = 11,
    CLOUD_LAYER = 14,
    QUEEN = 24,
    WORKER_ANT = 15,
    SOLDIER_ANT = 25,
    SCOOT_ANT = 35,
    SLAVEOWNER_ANT = 45,
    FIRST_PHEROMONE_LEVEL = 55
}


RockCell --|> BoardCell
BasicCell --|> BoardCell
ColonyCell --|> BoardCell

Board --|> Drawable
SimulationStats --|> Drawable

Simulation -- SimulationStats
Simulation -- Game
Simulation -- Board
GUIMain -- Simulation
Board -- BoardGenerator
Board o-- BoardCell
Board -- TileEnum

BoardCell *--> Ant

Worker --|> AgeAdult
Scout --|> AgeAdult

Worker --|> Ant
Scout --|> Ant
Soldier --|> Ant
SlaveOwner --|> Ant
Queen --|> Ant

@enduml